import StyleDictionaryPackage from "style-dictionary";
import fs from "fs";
import path from "path";

/**
 * The path the Figma Design Tokens are saved to
 */
const jsonPath = "rh_tokens/tokens.json"

/**
 * The path to save the Design Tokens parsed from the main Design Tokens from Token Studio for Figma
 * @returns null
 */
const getDirectoryPath = () => path.join(path.dirname(new URL(import.meta.url).pathname), `parsed`);

/**
 * Writes text into a file at a given file path.
 * The file path is relative to the execution context.
 * If the directory does not exist it will be created.
 * @param {string} source The text to be stored in the file 
 * @param {string} name The title of the file to be saved
 * @param {string} writePath Where to save the file to
 * @param {string} extension What is the suffix of the file, eg .txt, .json, .js. Do not include the dot, that will be added automatically
 */
const writeToFile = (
  source,
  name = "default",
  writePath = getDirectoryPath(),
  extension = "js"
) => {
  if (!fs.existsSync(writePath)) {
    fs.mkdirSync(writePath);
  }
  const filePath = `${writePath}/${name}.${extension}`;
  fs.writeFile(filePath, source, err => {
    err ? console.log(err) : console.log(`${filePath} created`);
  });
};

/**
 * Takes the auto-generated .json from Token Studio for Figma and extracts the top level key/value element, 
 * writing them to the file system and naming them as per they key with content as per the JSON content of the value. 
 * @param {string} jPath - the path to save the extracted values to.
 */
const preprocessTokensJson = (jPath = jsonPath) => {
  const tokens = JSON.parse(fs.readFileSync(jPath, "utf-8"));
  const { $metadata: { tokenSetOrder } } = tokens;
  const parsedTokens = tokenSetOrder.reduce((prev, current) => [...prev, [current, tokens[current]]], []);
  parsedTokens.forEach(([key, data]) => {
    writeToFile(JSON.stringify(data, null, 2), `${key}`, getDirectoryPath(), 'json');
  })
}


preprocessTokensJson()

/**
 * The generic header for generated files.
 * @returns string
 */
const createDoNotEditHeader = () => `/**
Do not edit directly
This file was generated by 'build-tokens.js' on
${new Date().toISOString()}
*/

`; 
/* CUSTOM FORMATTERS FOR THE STYLE DICTIONARY */
 
const jsonExport = "typescript/customFormat";
const stylexExport = "javascript/customFormat";

StyleDictionaryPackage.registerFormat({
  name: jsonExport,
  formatter: function (dictionary) {
    return `${createDoNotEditHeader()}
    export const tokens = ${JSON.stringify(dictionary.properties, null, 2)};`;

  },
});

StyleDictionaryPackage.registerFormat({
  name: stylexExport,
  formatter: function (dictionary) {
    return `${createDoNotEditHeader()}
    import * as stylex from '@stylexjs/stylex'; 
    export const tokens = stylex.defineVars(${JSON.stringify(dictionary.properties, null, 2)});`;
  },
});

/* CUSTOM FORMATTERS FOR THE STYLE DICTIONARY ENDS */

export const config = {
  source: ["rh_tokens/tokens.json"],
  preprocessors: ['tokens-studio'],
  platforms: {
    scss: {
      transformGroup: "scss",
      prefix: "rh",
      buildPath: "build/scss/",
      files: [
        {
          destination: "_variables.scss",
          format: "scss/variables",
        },
      ],
    },
    css: {
      transformGroup: "css",
      buildPath: "build/css/",
      files: [
        {
          destination: "tokens.css",
          format: "css/variables",
        },
      ],
    },
    js: {
      transformGroup: "js",
      buildPath: "build/js/",
      files: [
        {
          destination: "tokens.js",
          format: "javascript/es6",
        },
      ],
    },
    ts: {
      transformGroup: "js",
      buildPath: "build/ts/",
      files: [
        {
          destination: "tokens.ts",
          format: jsonExport,
        },
      ],
    },
    stylex: {
      transformGroup: "js",
      buildPath: "build/stylex/",
      files: [
        {
          destination: "tokens.stylex.js",
          format: stylexExport,
        },
      ],
    },
  },
};

export const createConfig = (fileSource,  destinationFileName) => {
  
}

const styleDictionary = StyleDictionaryPackage.extend(config);
// styleDictionary.cleanAllPlatforms();
// styleDictionary.buildAllPlatforms();

//Read the generated TypeScript file
const tsFile = fs.readFileSync("build/ts/tokens.ts", "utf-8");

//Log the generated TypeScript code
//console.log(tsFile);
